{
    "message": "AI Task Processed",
    "aiResponse": [
        {
            "type": "text",
            "text": {
                "value": "Implementing JWT (JSON Web Token) authentication in a Node.js application involves several steps. Below, I'll guide you through creating a simple example with the following structure:\n\n1. **Set up the Project**\n2. **Install Dependencies**\n3. **Create the Server**\n4. **Add Authentication Routes**\n5. **Protect Routes with JWT**\n\n### Step 1: Set up the Project\n\nFirst, create a directory for your project and initialize it with npm:\n\n```bash\nmkdir jwt-auth-example\ncd jwt-auth-example\nnpm init -y\n```\n\n### Step 2: Install Dependencies\n\nYou'll need a few packages to implement the authentication:\n\n- `express`: Web framework\n- `jsonwebtoken`: For creating and verifying JWTs\n- `bcryptjs`: For hashing passwords\n- `dotenv`: For managing environment variables\n\nInstall these packages using npm:\n\n```bash\nnpm install express jsonwebtoken bcryptjs dotenv\n```\n\n### Step 3: Create the Server\n\nCreate a file named `server.js` and set up a simple Express server:\n\n```javascript\n// server.js\nconst express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nrequire('dotenv').config();\n\nconst app = express();\napp.use(express.json());\n\nconst PORT = process.env.PORT || 5000;\n\n// Fake user for demonstration (Usually you'd fetch this from a database)\nlet users = [];\n\n// JWT secret\nconst JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret';\n```\n\n### Step 4: Add Authentication Routes\n\nNext, let's add routes for user registration and login:\n\n```javascript\n// Register route\napp.post('/register', async (req, res) => {\n    const { username, password } = req.body;\n\n    // Hash the password before saving\n    const hashedPassword = await bcrypt.hash(password, 10);\n    users.push({ username, password: hashedPassword });\n    res.status(201).send('User registered');\n});\n\n// Login route\napp.post('/login', async (req, res) => {\n    const { username, password } = req.body;\n    \n    // Find user\n    const user = users.find(user => user.username === username);\n    if (!user) return res.status(400).send('User not found');\n\n    // Check password\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) return res.status(400).send('Invalid credentials');\n\n    // Create and sign JWT\n    const token = jwt.sign({ username: user.username }, JWT_SECRET, { expiresIn: '1h' });\n    res.json({ token });\n});\n```\n\n### Step 5: Protect Routes with JWT\n\nTo protect a route, you can create a middleware that verifies the JWT:\n\n```javascript\n// Middleware to verify JWT\nfunction authenticateJWT(req, res, next) {\n    const token = req.header('Authorization')?.split(' ')[1];\n    if (!token) return res.sendStatus(403);\n\n    jwt.verify(token, JWT_SECRET, (err, user) => {\n        if (err) return res.sendStatus(403);\n        req.user = user;\n        next();\n    });\n}\n\n// Protected route\napp.get('/protected', authenticateJWT, (req, res) => {\n    res.send('This is a protected route');\n});\n```\n\n### Step 6: Start the Server\n\nFinally, start the server by adding the following at the end of your `server.js` file:\n\n```javascript\napp.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n});\n```\n\n### Step 7: Test the Implementation\n\nYou can test the implementation using a tool like Postman or Curl:\n\n1. **Register a User:**\n   Make a POST request to `/register` with JSON body:\n   ```json\n   {\n     \"username\": \"user1\",\n     \"password\": \"password1\"\n   }\n   ```\n\n2. **Login:**\n   Make a POST request to `/login` with JSON body:\n   ```json\n   {\n     \"username\": \"user1\",\n     \"password\": \"password1\"\n   }\n   ```\n   You'll receive a JWT token in response.\n\n3. **Access Protected Route:**\n   Make a GET request to `/protected` with the `Authorization` header as:\n   ```\n   Bearer YOUR_JWT_TOKEN\n   ```\n\n### Summary\n\nThis is a basic example of implementing JWT authentication in a Node.js application. It's important to consider additional security measures for production, including securing your JWT secret, implementing rate limiting, and ensuring HTTPS for token transmission.",
                "annotations": []
            }
        }
    ]
}